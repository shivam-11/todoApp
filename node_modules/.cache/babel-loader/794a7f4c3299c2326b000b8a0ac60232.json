{"ast":null,"code":"import React from 'react';\nimport packageJson from '../package.json';\nglobal.appVersion = packageJson.version; // version from response - first param, local version second param\n\nconst semverGreaterThan = (versionA, versionB) => {\n  const versionsA = versionA.split(/\\./g);\n  const versionsB = versionB.split(/\\./g);\n\n  while (versionsA.length || versionsB.length) {\n    const a = Number(versionsA.shift());\n    const b = Number(versionsB.shift()); // eslint-disable-next-line no-continue\n\n    if (a === b) continue; // eslint-disable-next-line no-restricted-globals\n\n    return a > b || isNaN(b);\n  }\n\n  return false;\n};\n\nclass CacheBuster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      isLatestVersion: false,\n      refreshCacheAndReload: () => {\n        console.log('Clearing cache and hard reloading...');\n\n        if (caches) {\n          // Service worker cache should be cleared with caches.delete()\n          caches.keys().then(function (names) {\n            for (let name of names) caches.delete(name);\n          });\n        } // delete browser cache and hard reload\n\n\n        window.location.reload(true);\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch('/meta.json').then(response => response.json()).then(meta => {\n      const latestVersion = meta.version;\n      const currentVersion = global.appVersion;\n      const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\n\n      if (shouldForceRefresh) {\n        console.log(`We have a new version - ${latestVersion}. Should force refresh`);\n        this.setState({\n          loading: false,\n          isLatestVersion: false\n        });\n      } else {\n        console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\n        this.setState({\n          loading: false,\n          isLatestVersion: true\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      loading,\n      isLatestVersion,\n      refreshCacheAndReload\n    } = this.state;\n    return this.props.children({\n      loading,\n      isLatestVersion,\n      refreshCacheAndReload\n    });\n  }\n\n}\n\nexport default CacheBuster;","map":{"version":3,"sources":["/Users/shivamsingh/Documents/react/learningapp/src/CacheBuster.js"],"names":["React","packageJson","global","appVersion","version","semverGreaterThan","versionA","versionB","versionsA","split","versionsB","length","a","Number","shift","b","isNaN","CacheBuster","Component","constructor","props","state","loading","isLatestVersion","refreshCacheAndReload","console","log","caches","keys","then","names","name","delete","window","location","reload","componentDidMount","fetch","response","json","meta","latestVersion","currentVersion","shouldForceRefresh","setState","render","children"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACAC,MAAM,CAACC,UAAP,GAAoBF,WAAW,CAACG,OAAhC,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChD,QAAMC,SAAS,GAAGF,QAAQ,CAACG,KAAT,CAAe,KAAf,CAAlB;AAEA,QAAMC,SAAS,GAAGH,QAAQ,CAACE,KAAT,CAAe,KAAf,CAAlB;;AACA,SAAOD,SAAS,CAACG,MAAV,IAAoBD,SAAS,CAACC,MAArC,EAA6C;AAC3C,UAAMC,CAAC,GAAGC,MAAM,CAACL,SAAS,CAACM,KAAV,EAAD,CAAhB;AAEA,UAAMC,CAAC,GAAGF,MAAM,CAACH,SAAS,CAACI,KAAV,EAAD,CAAhB,CAH2C,CAI3C;;AACA,QAAIF,CAAC,KAAKG,CAAV,EAAa,SAL8B,CAM3C;;AACA,WAAOH,CAAC,GAAGG,CAAJ,IAASC,KAAK,CAACD,CAAD,CAArB;AACD;;AACD,SAAO,KAAP;AACD,CAdD;;AAgBA,MAAME,WAAN,SAA0BjB,KAAK,CAACkB,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,eAAe,EAAE,KAFN;AAGXC,MAAAA,qBAAqB,EAAE,MAAM;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;;AACA,YAAIC,MAAJ,EAAY;AACV;AACAA,UAAAA,MAAM,CAACC,IAAP,GAAcC,IAAd,CAAmB,UAASC,KAAT,EAAgB;AACjC,iBAAK,IAAIC,IAAT,IAAiBD,KAAjB,EAAwBH,MAAM,CAACK,MAAP,CAAcD,IAAd;AACzB,WAFD;AAGD,SAP0B,CAS3B;;;AACAE,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD;AAdU,KAAb;AAgBD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,YAAD,CAAL,CACGR,IADH,CACSS,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGV,IAFH,CAESW,IAAD,IAAU;AACd,YAAMC,aAAa,GAAGD,IAAI,CAACpC,OAA3B;AACA,YAAMsC,cAAc,GAAGxC,MAAM,CAACC,UAA9B;AAEA,YAAMwC,kBAAkB,GAAGtC,iBAAiB,CAACoC,aAAD,EAAgBC,cAAhB,CAA5C;;AACA,UAAIC,kBAAJ,EAAwB;AACtBlB,QAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0Be,aAAc,wBAArD;AACA,aAAKG,QAAL,CAAc;AAAEtB,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,eAAe,EAAE;AAAnC,SAAd;AACD,OAHD,MAGO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAa,yCAAwCe,aAAc,4BAAnE;AACA,aAAKG,QAAL,CAAc;AAAEtB,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,eAAe,EAAE;AAAnC,SAAd;AACD;AACF,KAdH;AAeD;;AACDsB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEvB,MAAAA,OAAF;AAAWC,MAAAA,eAAX;AAA4BC,MAAAA;AAA5B,QAAsD,KAAKH,KAAjE;AACA,WAAO,KAAKD,KAAL,CAAW0B,QAAX,CAAoB;AAAExB,MAAAA,OAAF;AAAWC,MAAAA,eAAX;AAA4BC,MAAAA;AAA5B,KAApB,CAAP;AACD;;AAzCuC;;AA4C1C,eAAeP,WAAf","sourcesContent":["import React from 'react';\nimport packageJson from '../package.json';\nglobal.appVersion = packageJson.version;\n\n// version from response - first param, local version second param\nconst semverGreaterThan = (versionA, versionB) => {\n  const versionsA = versionA.split(/\\./g);\n\n  const versionsB = versionB.split(/\\./g);\n  while (versionsA.length || versionsB.length) {\n    const a = Number(versionsA.shift());\n\n    const b = Number(versionsB.shift());\n    // eslint-disable-next-line no-continue\n    if (a === b) continue;\n    // eslint-disable-next-line no-restricted-globals\n    return a > b || isNaN(b);\n  }\n  return false;\n};\n\nclass CacheBuster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      isLatestVersion: false,\n      refreshCacheAndReload: () => {\n        console.log('Clearing cache and hard reloading...')\n        if (caches) {\n          // Service worker cache should be cleared with caches.delete()\n          caches.keys().then(function(names) {\n            for (let name of names) caches.delete(name);\n          });\n        }\n\n        // delete browser cache and hard reload\n        window.location.reload(true);\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch('/meta.json')\n      .then((response) => response.json())\n      .then((meta) => {\n        const latestVersion = meta.version;\n        const currentVersion = global.appVersion;\n\n        const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\n        if (shouldForceRefresh) {\n          console.log(`We have a new version - ${latestVersion}. Should force refresh`);\n          this.setState({ loading: false, isLatestVersion: false });\n        } else {\n          console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\n          this.setState({ loading: false, isLatestVersion: true });\n        }\n      });\n  }\n  render() {\n    const { loading, isLatestVersion, refreshCacheAndReload } = this.state;\n    return this.props.children({ loading, isLatestVersion, refreshCacheAndReload });\n  }\n}\n\nexport default CacheBuster;"]},"metadata":{},"sourceType":"module"}